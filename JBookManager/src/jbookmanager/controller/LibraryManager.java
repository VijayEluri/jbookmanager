/**
 * Manages the lifetime of Library objects
 */
package jbookmanager.controller;

import jbookmanager.model.*;
import java.beans.XMLDecoder;
import java.beans.XMLEncoder;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;

/**
 *
 * @author uli
 */
public abstract class LibraryManager
{

    public static Library readLibrary(String file) throws FileNotFoundException
    {
        InputStream fin = null;
        try
        {
            fin = new GZIPInputStream(new FileInputStream(file));
            XMLDecoder dec = new XMLDecoder(fin);
            dec.close();
            return (Library) dec.readObject();
        }
        catch (IOException ex)
        {
            Logger.getLogger(LibraryManager.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally
        {
            try
            {
                fin.close();
            }
            catch (IOException ex)
            {
                Logger.getLogger(LibraryManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return null;
    }

    /**
     * Generates a semicolon-separated list of the list elements
     * @param data the list to be converted
     * @return a semicolon-separated list of the list elements
     */
    public static String listOverview(List<String> data)
    {
        String ret = "";
        for (String s : data)
        {
            ret += s + ";";
        }
        return ret;
    }

    /**
     * Reassembles a list from a string generated by listOvervieew(List<String>)
     * @param data the semicolon-separated string to reassemble
     * @return the reassembled list
     */
    public static Vector<String> assembleList(String data)
    {
        String[] split = data.split(";");
        Vector<String> ret = new Vector<String>();
        for (String s : split)
        {
            ret.add(s);
        }
        return ret;
    }

    public static void writeLibrary(Library lib, String file)
    {
        OutputStream fout = null;
        try
        {
            fout = new GZIPOutputStream(new FileOutputStream(file));
            XMLEncoder enc = new XMLEncoder(fout);
            enc.writeObject(lib);
            enc.close();
        }
        catch (IOException ex)
        {
            Logger.getLogger(LibraryManager.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally
        {
            try
            {
                fout.close();
            }
            catch (IOException ex)
            {
                Logger.getLogger(LibraryManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
